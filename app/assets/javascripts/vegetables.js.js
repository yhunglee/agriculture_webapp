// Generated by CoffeeScript 1.10.0
(function() {
  var append_previous_params_of_form_to_lastest_request, arrayOfDate, arrayOfTotalData, averagePriceOfObj, chart, classifiedObjectOfJSONObj, classify_jsonobjectarray_into_different_groups_duetoattributevalue, difference, display_or_not_veggie_list, element, get_parameters_from_url, i, indexOfclassifiedObjectOfJSONObj, j, k, kindOfJSONObj, l, len, m, myJSONObj, obj, objOfDate, ref, submit_query_time_form_of_select_option, transactionQuantityOfObj;

  classify_jsonobjectarray_into_different_groups_duetoattributevalue = function(aryOfJSONObject) {
    var element, l, len, objOfGroupingJSONObject, ref;
    objOfGroupingJSONObject = new Object();
    for (l = 0, len = aryOfJSONObject.length; l < len; l++) {
      element = aryOfJSONObject[l];
      if ((ref = objOfGroupingJSONObject[element['name']]) != null ? ref.length : void 0) {
        objOfGroupingJSONObject[element['name']].push(element);
      } else {
        objOfGroupingJSONObject[element['name']] = [element];
      }
      objOfDate[element.date] = 1;
    }
    return objOfGroupingJSONObject;
  };

  myJSONObj = JSON.parse(gon.myDataV_json);

  objOfDate = new Object();

  classifiedObjectOfJSONObj = classify_jsonobjectarray_into_different_groups_duetoattributevalue(myJSONObj);

  arrayOfDate = Object.keys(objOfDate);

  kindOfJSONObj = Object.keys(classifiedObjectOfJSONObj);

  if (kindOfJSONObj.length <= 1) {
    chart = c3.generate({
      bindto: '#chart',
      data: {
        json: myJSONObj,
        keys: {
          x: 'date',
          value: ['total_average_price', 'total_transaction_quantity']
        },
        labels: false,
        axes: {
          total_transaction_quantity: 'y2'
        }
      },
      axis: {
        x: {
          type: 'timeseries',
          tick: {
            format: '%Y-%m-%d'
          }
        },
        y: {
          label: {
            text: 'average price',
            position: 'outer-middle'
          }
        },
        y2: {
          show: true,
          label: {
            text: 'transaction quantity',
            position: 'outer-middle'
          }
        }
      }
    });
  } else {
    averagePriceOfObj = new Object();
    transactionQuantityOfObj = new Object();
    j = 0;
    for (l = 0, len = kindOfJSONObj.length; l < len; l++) {
      element = kindOfJSONObj[l];
      indexOfclassifiedObjectOfJSONObj = 0;
      for (i = m = 0, ref = arrayOfDate.length - 1; m <= ref; i = m += 1) {
        if ((classifiedObjectOfJSONObj[element][indexOfclassifiedObjectOfJSONObj] != null)) {
          difference = (new Date(classifiedObjectOfJSONObj[element][indexOfclassifiedObjectOfJSONObj]['date'])).getDate() - (new Date(arrayOfDate[i])).getDate();
          if (difference === 0) {
            averagePriceOfObj[element] = averagePriceOfObj[element] || [];
            averagePriceOfObj[element].push(classifiedObjectOfJSONObj[element][indexOfclassifiedObjectOfJSONObj]['total_average_price']);
            transactionQuantityOfObj[element] = transactionQuantityOfObj[element] || [];
            transactionQuantityOfObj[element].push(classifiedObjectOfJSONObj[element][indexOfclassifiedObjectOfJSONObj]['total_transaction_quantity']);
            indexOfclassifiedObjectOfJSONObj += 1;
          } else if (difference < 0) {
            averagePriceOfObj[element] = averagePriceOfObj[element] || [];
            averagePriceOfObj[element].push(0);
            transactionQuantityOfObj[element] = transactionQuantityOfObj[element] || [];
            transactionQuantityOfObj[element].push(0);
          } else if (difference > 0) {
            averagePriceOfObj[element] = averagePriceOfObj[element] || [];
            averagePriceOfObj[element].push(0);
            transactionQuantityOfObj[element] = transactionQuantityOfObj[element] || [];
            transactionQuantityOfObj[element].push(0);
          }
        } else {
          averagePriceOfObj[element] = averagePriceOfObj[element] || [];
          averagePriceOfObj[element].push(0);
          transactionQuantityOfObj[element] = transactionQuantityOfObj[element] || [];
          transactionQuantityOfObj[element].push(0);
        }
      }
      averagePriceOfObj[element].unshift(element + "平均價");
      transactionQuantityOfObj[element].unshift(element + "總交易量");
    }
    arrayOfDate.unshift("x");
    console.log(kindOfJSONObj);
    arrayOfTotalData = new Array();
    arrayOfTotalData.push(arrayOfDate);
    i = 0;
    while (i < kindOfJSONObj.length) {
      arrayOfTotalData.push(averagePriceOfObj[kindOfJSONObj[i]]);
      arrayOfTotalData.push(transactionQuantityOfObj[kindOfJSONObj[i]]);
      i += 1;
    }
    i = 0;
    k = 0;
    chart = c3.generate({
      bindto: '#chart',
      data: {
        x: 'x',
        columns: arrayOfTotalData,
        label: false,
        axes: (
          obj = {},
          obj[kindOfJSONObj[i] + "平均價"] = kindOfJSONObj[i] != null ? 'y' : void 0,
          obj[kindOfJSONObj[k] + "總交易量"] = kindOfJSONObj[k] != null ? 'y2' : void 0,
          obj
        )
      },
      axis: {
        x: {
          type: 'timeseries',
          tick: {
            format: '%Y-%m-%d'
          }
        },
        y: {
          label: {
            text: 'average price',
            position: 'outer-middle'
          }
        },
        y2: {
          show: true,
          label: {
            text: 'transation quantity',
            position: 'outer-middle'
          }
        }
      }
    });
  }

  display_or_not_veggie_list = function() {
    var currentDisplayConfig;
    currentDisplayConfig = $('.veggie-list').css('display');
    if (currentDisplayConfig === "none") {
      $('.veggie-list').css('display', 'block');
      $('.btn-submit-veggie-query').css('display', 'block');
      return $('.btn-veggie-list').css('left', '70%');
    } else {
      $('.veggie-list').css('display', 'none');
      $('.btn-submit-veggie-query').css('display', 'none');
      return $('.btn-veggie-list').css('left', '0%');
    }
  };

  $(document).off('click', '.btn-veggie-list').on('click', '.btn-veggie-list', display_or_not_veggie_list);

  get_parameters_from_url = function() {
    var aryParams, key, len1, n, queryMultipleValuePattern, rawVars, ref1, val;
    aryParams = {};
    rawVars = window.location.search.substring(1).split("&");
    queryMultipleValuePattern = /query\[\]/;
    if (rawVars != null ? rawVars.length : void 0) {
      i = 1;
      for (n = 0, len1 = rawVars.length; n < len1; n++) {
        element = rawVars[n];
        ref1 = element.split("="), key = ref1[0], val = ref1[1];
        if ((decodeURIComponent(key)).match(queryMultipleValuePattern)) {
          aryParams[decodeURIComponent(key) + ("_" + i)] = decodeURIComponent(val);
          i += 1;
        } else {
          aryParams[decodeURIComponent(key)] = decodeURIComponent(val);
        }
      }
    }
    return aryParams;
  };

  append_previous_params_of_form_to_lastest_request = function(previousParams) {
    var len1, n, property, queryMultipleValuePattern, ref1, results;
    if (previousParams != null) {
      if (previousParams['query-time'] != null) {
        delete previousParams['query-time'];
      }
      if (previousParams['page'] != null) {
        delete previousParams['page'];
      }
      $('#filter-veggie-query input[type=hidden]').remove();
      queryMultipleValuePattern = /query\[\]_[\d]+/;
      ref1 = Object.keys(previousParams);
      results = [];
      for (n = 0, len1 = ref1.length; n < len1; n++) {
        property = ref1[n];
        if (property.match(queryMultipleValuePattern) != null) {
          results.push($('#filter-veggie-query').append('<input type="hidden" name="query[]" value="' + previousParams[property] + '">'));
        } else {
          results.push($('#filter-veggie-query').append('<input type="hidden" name="' + property + '" value="' + previousParams[property] + '">'));
        }
      }
      return results;
    }
  };

  submit_query_time_form_of_select_option = function() {
    var response;
    response = get_parameters_from_url();
    if (response != null) {
      append_previous_params_of_form_to_lastest_request(response);
      return $("#filter-veggie-query").submit();
    }
  };

  $(document).off('change', '.query-time').on('change', '.query-time', submit_query_time_form_of_select_option);

}).call(this);
